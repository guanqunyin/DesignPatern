设计模式就是：相同的抽接口，不同的搞继承，抽象类

装饰者模式： 包装类和被包装类都继承自同一个类或者实现同一个接口。包装类中有被包装类的一个引用。

装饰者模式： 动态的给一个对象添加一个额外的职责， 就扩展功能而言，比继承子类更灵活



 问题： 1.代理和装饰者模式的区别是什么？
    答案：动态的将责任附加到被装饰者对象上，用于扩展对象的功能。比继承的灵活性大。典型的如Java IO的设计即是装饰者模式的典型应用。
       　　代理模式模式的定义：对其他对象进行代理，以控制对被代理对象的访问。Spring的为业务逻辑层方法生成的代理类，主要进行一些事务控制等。
       　　由定义可以看出装饰的责任是扩展功能 ，而代理主要控制访问。

 问题： 2.装饰者模式如何初始化第一个被装饰的类？
    答案：实现的方式有问题，包装的总是必须是一个实现类，而不是一个抽象类

 问题： 3. 究竟继承自同一个类还是实现同一个接口，哪个才算是装饰者模式呢？
    答案：无需纠结哪一个才是真正的装饰者模式，只要对被包装者起到了装饰的功能，那么这就是一个装饰者模式